# azure-pipelines.yml
trigger:
  branches:
    include:
      - main

name: $(Date:yyyyMMdd).$(Rev:r)

variables:
  acrLoginServer: 'eshopweb2025.azurecr.io'     # ثابت شما
  imageRepository: 'eshopweb2025'               # اسم ایمیج/ریپو در ACR
  dockerfilePath: 'src/Web/Dockerfile'          # در صورت نیاز تغییر بده (مثلاً src/PublicApi/Dockerfile)
  buildContext: '.'
  imageTag: '$(Build.BuildId)'                  # تگ نسخه
  containerPort: '8080'                         # باید با Dockerfile هماهنگ باشد (ASPNETCORE_URLS=http://+:8080)

  # ---- این 3 تا را با واقعی‌ها عوض کن ----
  acrServiceConnection: '967017a6-509a-45db-b010-108cbc4c077a'           # Docker Registry (ACR) service connection
  azureSubscription: 'arm-eshop'              # ARM service connection
  webAppName: 'eshopweb2025-app'                # نام Web App (Linux/Container)
  # -----------------------------------------

stages:
# =======================
# 1) BUILD
# =======================
- stage: Build
  displayName: 'Build'
  jobs:
  - job: BuildJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - script: |
        dotnet restore
        dotnet build --configuration Release
      displayName: 'dotnet restore & build'

    # Build Docker image (بدون push)
    - task: Docker@2
      displayName: 'Docker build'
      inputs:
        command: 'build'
        dockerfile: '$(dockerfilePath)'
        buildContext: '$(buildContext)'
        repository: '$(imageRepository)'
        tags: |
          $(imageTag)

    # خروجی نام کامل ایمیج برای مراحل بعد
    - script: |
        echo "$(acrLoginServer)/$(imageRepository):$(imageTag)" > image_name.txt
        echo "IMAGE=$(acrLoginServer)/$(imageRepository):$(imageTag)"
      displayName: 'Write image name'
    - publish: image_name.txt
      artifact: img

# =======================
# 2) PUSH
# =======================
- stage: Push
  displayName: 'Push to ACR'
  dependsOn: Build
  jobs:
  - job: PushJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - download: current
      artifact: img

    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: '$(acrServiceConnection)'

    # توجه: چون بین استیج‌ها لایه‌های Docker حفظ نمی‌شوند، اینجا دوباره build می‌کنیم و سپس push می‌کنیم.
    - task: Docker@2
      displayName: 'Build & Push'
      inputs:
        command: 'buildAndPush'
        containerRegistry: '$(acrServiceConnection)'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        buildContext: '$(buildContext)'
        tags: |
          $(imageTag)
          latest

# =======================
# 3) DEPLOY
# =======================
- stage: Deploy
  displayName: 'Deploy to Azure Web App (Container)'
  dependsOn: Push
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployJob
    environment: 'prod'     # می‌تونی اسم محیط رو عوض کنی
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: img

          - task: Bash@3
            name: ReadImage
            inputs:
              targetType: 'inline'
              script: |
                IMAGE=$(cat $(Pipeline.Workspace)/img/image_name.txt)
                echo "##vso[task.setvariable variable=FULL_IMAGE]$IMAGE"
                echo "Using image: $IMAGE"

          # ست کردن تنظیمات پورت (در صورت نیاز)
          - task: AzureAppServiceSettings@1
            displayName: 'Set WEBSITES_PORT app setting'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(webAppName)'
              appSettings: |
                [
                  {
                    "name": "WEBSITES_PORT",
                    "value": "$(containerPort)",
                    "slotSetting": false
                  }
                ]

          - task: AzureWebAppContainer@1
            displayName: 'Deploy container'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(webAppName)'
              containers: '$(FULL_IMAGE)'
