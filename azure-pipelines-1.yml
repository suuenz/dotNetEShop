# این قسمت مشخص می‌کنه که پایپلاین با هر تغییری روی برنچ main اجرا بشه
trigger:
  branches:
    include:
      - main

# مشخص کردن نوع ماشین مجازی برای اجرای مراحل (اینجا Ubuntu آخرین نسخه)
pool:
  vmImage: 'ubuntu-latest'

# تعریف متغیرهای عمومی برای استفاده در مراحل مختلف
variables:
  dockerRegistryServiceConnection: 'eshopwebdr'  # نام کانکشن رجیستری ACR
  dockerComposeFile: 'docker-compose.yml'        # مسیر فایل داکر کامپوز
  dockerComposeProjectName: 'eshopapp'           # نام پروژه برای Docker Compose (فقط حروف کوچک و عدد)
  containerRegistry: 'eshopweb2025.azurecr.io'   # آدرس کامل رجیستری ACR

# مرحله اول و تنها مرحله فعلاً: بیلد و پوش ایمیج‌ها
stages:
- stage: BuildAndPush
  displayName: Build and Push Docker Images
  jobs:
  - job: BuildAndPushJob
    displayName: Build & Push
    steps:

    # مرحله checkout: سورس کد پروژه رو از ریپو دریافت می‌کنه
    - checkout: self

    # لاگین به Azure Container Registry با استفاده از service connection
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    # اجرای docker-compose برای بیلد کردن سرویس‌ها
    - task: DockerCompose@0
      displayName: 'Build Docker Images'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'eshopwebrm'         # اگه ارور داد از serviceConnection استفاده کن
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        projectName: $(dockerComposeProjectName)
        action: 'Build services'

    # اجرای docker-compose برای push کردن ایمیج‌ها به ACR
    - task: DockerCompose@0
      displayName: 'Push Docker Images'
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'eshopwebrm'
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        projectName: $(dockerComposeProjectName)
        action: 'Push services'